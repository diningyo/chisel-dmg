import chisel3._
import org.scalatest._
import chiseltest._

object Inst011LDRPA extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // test code starts from $0150.
    dut.clock.step(0x50)

    // skip register initialization.
    dut.clock.step(0x0a)

    // jr $7f

    // ;; test 0 - bc
	  // ld a, $01                   ; set write value
    // ld (bc), a
    compareReg(0x00, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015a, false, false, false, false) // fetch
    compareReg(0x01, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015b, false, false, false, false) // write

    // ld a, $00                   ; clear
    dut.clock.step(0x02)

    // ld a, (bc)
    compareReg(0x01, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015d, false, false, false, false) // fetch
    compareReg(0x00, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015e, false, false, false, false) // fetch
    compareReg(0x00, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015e, false, false, false, false) // fetch
    compareReg(0x01, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x015f, false, false, false, false) // fetch

    // ;; test 1 - de
    // ld a, $02                   ; set write value
    // ld (de), a
    compareReg(0x01, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0160, false, false, false, false) // fetch
    compareReg(0x02, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0161, false, false, false, false) // write

    // ld a, $00                   ; clear
    dut.clock.step(0x02)

    // ld a, (de)
    compareReg(0x02, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0163, false, false, false, false) // fetch
    compareReg(0x00, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0164, false, false, false, false) // fetch
    compareReg(0x00, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0164, false, false, false, false) // fetch
    compareReg(0x02, 0x10, 0x20, 0x30, 0x40, 0x00, 0x00, 0x0000, 0x0165, false, false, false, false) // fetch
  }
}
