import chisel3._
import org.scalatest._
import chiseltest._

object Inst04LDARP extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // ld b, $10                   ; b  = $10
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0100, false, false, false, false) // m1
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0101, false, false, false, false) // m2

    // ld c, $20                   ; c  = $20
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0102, false, false, false, false) // m3 / m1
    compareReg(0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0103, false, false, false, false) // m2

	  // ld a, (bc)                  ; bc = $1020 / a = $01
    compareReg(0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0104, false, false, false, false) // m3 / m1
    compareReg(0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0105, false, false, false, false) // m2 / read $1020

    // ld d, $20                   ; d  = $20
    compareReg(0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0105, false, false, false, false) // m3 / m1
    compareReg(0x01, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0106, false, false, false, false) // m2

	  // ld e, $10                   ; e  = $10
    compareReg(0x01, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0107, false, false, false, false) // m3 / m1
    compareReg(0x01, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0108, false, false, false, false) // m2

	  // ld a, (de)                  ; hl = $2010 / a = $02
    compareReg(0x01, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0109, false, false, false, false) // m3 / m1
    compareReg(0x01, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x010a, false, false, false, false) // m2 / read $1020

    // ld h, $01                   ; h  = $01
    compareReg(0x01, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x010a, false, false, false, false) // m3 / m1
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x010b, false, false, false, false) // m2

	  // ld l, $ff                   ; l  = $ff
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x010c, false, false, false, false) // m3 / m1
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x01, 0x00, 0x00, 0x010d, false, false, false, false) // m2

	  // ld a, (hl+)                 ; a  = (hl = $01ff) = $03 -> hl = $0200
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x01, 0x00, 0x00, 0x010e, false, false, false, false) // m3 / m1
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x01, 0xff, 0x00, 0x010f, false, false, false, false) // m2 / read $01ff

    // ld h, $03                   ; h  = $02
    compareReg(0x02, 0x10, 0x20, 0x20, 0x10, 0x01, 0xff, 0x00, 0x010f, false, false, false, false) // m3 / m1
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x02, 0x00, 0x00, 0x0110, false, false, false, false) // m2

	  // ld l, $00                   ; l  = $00
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x02, 0x00, 0x00, 0x0111, false, false, false, false) // m3 / m1
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x03, 0x00, 0x00, 0x0112, false, false, false, false) // m2

	  // ld a, (hl-)                 ; a  = (hl = $0200) = $03 -> hl = $02ff
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x03, 0x00, 0x00, 0x0113, false, false, false, false) // m3 / m1
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x03, 0x00, 0x00, 0x0114, false, false, false, false) // m2 / read $0300

    // nop - to check final status of each register
    compareReg(0x03, 0x10, 0x20, 0x20, 0x10, 0x03, 0x00, 0x00, 0x0114, false, false, false, false) // m3 / m1
    compareReg(0x04, 0x10, 0x20, 0x20, 0x10, 0x02, 0xff, 0x00, 0x0115, false, false, false, false) // m2
  }
}
