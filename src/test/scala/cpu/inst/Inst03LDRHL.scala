import chisel3._
import org.scalatest._
import chiseltest._

object Inst03LDRHL extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // ld h, $10
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0100, false, false, false, false) // m1
    dut.clock.step(1)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0101, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld l, $20
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0102, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0103, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld a, (hl)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0104, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x0105, false, false, false, false) // m2 / read $1020
    dut.clock.step(1)

	  // ld l, $21
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x0105, false, false, false, false) // m3 / m1
    dut.clock.step(2)
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x0106, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld b, (hl)
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x0107, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x21, 0x00, 0x0108, false, false, false, false) // m2 / read $1021
    dut.clock.step(1)

    // ld l, $22
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x21, 0x00, 0x0108, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x10, 0x21, 0x00, 0x0109, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld c, (hl)
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x10, 0x21, 0x00, 0x010a, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x10, 0x22, 0x00, 0x010b, false, false, false, false) // m2 / read $1022
    dut.clock.step(1)

    // ld l, $23
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x10, 0x22, 0x00, 0x010b, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x10, 0x22, 0x00, 0x010c, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld d, (hl)
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x10, 0x22, 0x00, 0x010d, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x10, 0x23, 0x00, 0x010e, false, false, false, false) // m2 / read $1023
    dut.clock.step(1)

    // ld l, $24
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x10, 0x23, 0x00, 0x010e, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x10, 0x23, 0x00, 0x010f, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld e, (hl)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x10, 0x23, 0x00, 0x0110, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x10, 0x24, 0x00, 0x0111, false, false, false, false) // m2 / read $1024
    dut.clock.step(1)

    // ld l, $25
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x10, 0x24, 0x00, 0x0111, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x24, 0x00, 0x0112, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld h, (hl)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x24, 0x00, 0x0113, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x25, 0x00, 0x0114, false, false, false, false) // m2 / read $1025
    dut.clock.step(1)

    // ld l, $20
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x25, 0x00, 0x0114, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x20, 0x25, 0x00, 0x0115, false, false, false, false) // m2
    dut.clock.step(1)

	  // ld l, (hl)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x20, 0x25, 0x00, 0x0116, false, false, false, false) // m3 / m1
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x20, 0x20, 0x00, 0x0117, false, false, false, false) // m2 / read $2020
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x20, 0x20, 0x00, 0x0117, false, false, false, false) // m3 / nop
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x20, 0xff, 0x00, 0x0118, false, false, false, false) // nop
    dut.clock.step(1)
  }
}
