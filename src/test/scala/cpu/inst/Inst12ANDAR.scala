import chisel3._
import org.scalatest._
import chiseltest._

object Inst12ANDAR extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // test code starts from $0150.
    dut.clock.step(0x50)

    // ld  a, $ff                 ; a  = $ff
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0150, false, false, false, false) // m1
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0151, false, false, false, false) // m2

    // ld  b, $01                 ; b  = $01
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0152, false, false, false, false) // m1
    compareReg(0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0153, false, false, false, false) // m2

    // ld  c, $02                 ; c  = $02
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0154, false, false, false, false) // m1
    compareReg(0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0155, false, false, false, false) // m2

	  // ld  d, $03                 ; d  = $03
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0156, false, false, false, false) // m1
    compareReg(0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0157, false, false, false, false) // m2

    // ld  e, $04                 ; e  = $04
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0158, false, false, false, false) // m1
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0159, false, false, false, false) // m2

	  // ld  h, $05                 ; h  = $05
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x015a, false, false, false, false) // m1
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x015b, false, false, false, false) // m2

	  // ld  l, $06                 ; l  = $06
    //            a     b     c     d     e     h     l    sp      pc    f_z    f_n    f_h    f_c
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x015c, false, false, false, false) // m1
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x015d, false, false, false, false) // m2

    // sub a, b                   ; a  = $ff - $01 = $fe / z = 0 / c = 0
    compareReg(0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x015e, false, false, false, false) // m1

    // sub a, c                   ; a  = $fe - $02 = $fc / z = 0 / c = 0
    compareReg(0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x015f, false, false, false, false) // m1

    // sub a, d                   ; a  = $fc - $03 = $f9 / z = 0 / c = 0
    compareReg(0xfc, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0160, false, false, false, false) // m1

    // sub a, e                   ; a  = $f9 - $04 = $f5 / z = 0 / c = 0
    compareReg(0xf8, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0161, false, false, false, false) // m1

    // sub a, h                   ; a  = $f5 - $05 = $f0 / z = 0
    compareReg(0xf0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0162, false, false, false, false) // m1

    // sub a, l                   ; a  = $f0 - $06 = $ea / z = 0 / h = 0 -> 1
    compareReg(0xe0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0163, false, false, false, false) // m1

    // sub a, a                   ; a  = $ea - $ea = $00 / z = 0 ->
    compareReg(0xc0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0164, false, false, false, false) // m1

    // ;; check z/c flag
    // ld  a, $00
    compareReg(0xc0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0165, false, false, false, false) // m1
    compareReg(0xc0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0166, false, false, false, false) // m2

    // ld  b, $00
    compareReg(0xc0, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0167, false, false, false, false) // m1
    compareReg(0x00, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0168, false, false, false, false) // m2
    compareReg(0x00, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x0169, false, false, false, false) // m1

    // sub a, b                   ; a = $00 - $00 = $00 / z = 1
    compareReg(0x00, 0x00, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x016a, true,  false, false, false) // m1
    compareReg(0x00, 0x00, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x016b, true,  false, false, false) // m1 - nop
    compareReg(0x00, 0x00, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x016c, true,  false, false, false) // m1 - nop
  }
}
