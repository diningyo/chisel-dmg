import chisel3._
import chiseltest._

object Inst000LD extends TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // test code starts from $0150.
    dut.clock.step(0x50)

    // ld a, $01                  ; a = $01
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0150, false, false, false, false) // fetch
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0151, false, false, false, false)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0152, false, false, false, false)
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0153, false, false, false, false)

  	// ld a, a
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0154, false, false, false, false)

  	// ld b, a
    compareReg(0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0155, false, false, false, false)

  	// ld c, a
    compareReg(0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0156, false, false, false, false)

  	// ld d, a
    compareReg(0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x0000, 0x0157, false, false, false, false)

  	// ld e, a
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x0000, 0x0158, false, false, false, false)

  	// ld h, a
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0000, 0x0159, false, false, false, false)

  	// ld l, a
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015a, false, false, false, false)

    // ld b, $02                  ; b = $02
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015b, false, false, false, false)
    compareReg(0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015c, false, false, false, false)

  	// ld a, b
    compareReg(0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015d, false, false, false, false)

  	// ld b, b
    compareReg(0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015e, false, false, false, false)

  	// ld c, b
    compareReg(0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x0000, 0x015f, false, false, false, false)

  	// ld d, b
    compareReg(0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x0000, 0x0160, false, false, false, false)

  	// ld e, b
    compareReg(0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x0000, 0x0161, false, false, false, false)

  	// ld h, b
    compareReg(0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x0000, 0x0162, false, false, false, false)

  	// ld l, b
    compareReg(0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0163, false, false, false, false)

    // ld c, $03                  ; c = $03
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0164, false, false, false, false)
    compareReg(0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0165, false, false, false, false)

  	// ld a, c
    compareReg(0x03, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0166, false, false, false, false)

  	// ld b, c
    compareReg(0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0167, false, false, false, false)

  	// ld c, c
    compareReg(0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x0000, 0x0168, false, false, false, false)

  	// ld d, c
    compareReg(0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x0000, 0x0169, false, false, false, false)

  	// ld e, c
    compareReg(0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x0000, 0x016a, false, false, false, false)

  	// ld h, c
    compareReg(0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x0000, 0x016b, false, false, false, false)

  	// ld l, c
    compareReg(0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0000, 0x016c, false, false, false, false)

    // ld d, $04                  ; d = $04
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0000, 0x016d, false, false, false, false)
    compareReg(0x03, 0x03, 0x03, 0x04, 0x03, 0x03, 0x03, 0x0000, 0x016e, false, false, false, false)

  	// ld a, d
    compareReg(0x04, 0x03, 0x03, 0x04, 0x03, 0x03, 0x03, 0x0000, 0x016f, false, false, false, false)

  	// ld b, d
    compareReg(0x04, 0x04, 0x03, 0x04, 0x03, 0x03, 0x03, 0x0000, 0x0170, false, false, false, false)

  	// ld c, d
    compareReg(0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x0000, 0x0171, false, false, false, false)

  	// ld d, d
    compareReg(0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x0000, 0x0172, false, false, false, false)

  	// ld e, d
    compareReg(0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x0000, 0x0173, false, false, false, false)

  	// ld h, d
    compareReg(0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x0000, 0x0174, false, false, false, false)

  	// ld l, d
    compareReg(0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0000, 0x0175, false, false, false, false)

    // ld e, $05                  ; e = $05
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0000, 0x0176, false, false, false, false)
    compareReg(0x04, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04, 0x0000, 0x0177, false, false, false, false)

  	// ld a, e
    compareReg(0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04, 0x0000, 0x0178, false, false, false, false)

  	// ld b, e
    compareReg(0x05, 0x05, 0x04, 0x04, 0x05, 0x04, 0x04, 0x0000, 0x0179, false, false, false, false)

  	// ld c, e
    compareReg(0x05, 0x05, 0x05, 0x04, 0x05, 0x04, 0x04, 0x0000, 0x017a, false, false, false, false)

  	// ld d, e
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04, 0x0000, 0x017b, false, false, false, false)

  	// ld e, e
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04, 0x0000, 0x017c, false, false, false, false)

  	// ld h, e
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x04, 0x0000, 0x017d, false, false, false, false)

  	// ld l, e
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0000, 0x017e, false, false, false, false)

    // ld h, $06                  ; h = $06
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0000, 0x017f, false, false, false, false)
    compareReg(0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x05, 0x0000, 0x0180, false, false, false, false)

  	// ld a, h
    compareReg(0x06, 0x05, 0x05, 0x05, 0x05, 0x06, 0x05, 0x0000, 0x0181, false, false, false, false)

  	// ld b, h
    compareReg(0x06, 0x06, 0x05, 0x05, 0x05, 0x06, 0x05, 0x0000, 0x0182, false, false, false, false)

  	// ld c, h
    compareReg(0x06, 0x06, 0x06, 0x05, 0x05, 0x06, 0x05, 0x0000, 0x0183, false, false, false, false)

  	// ld d, h
    compareReg(0x06, 0x06, 0x06, 0x06, 0x05, 0x06, 0x05, 0x0000, 0x0184, false, false, false, false)

  	// ld e, h
    compareReg(0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x0000, 0x0185, false, false, false, false)

  	// ld h, h
    compareReg(0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x0000, 0x0186, false, false, false, false)

  	// ld l, h
    compareReg(0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0000, 0x0187, false, false, false, false)

    // ld l, $07                  ; l = $07
    //            a     b     c     d     e     h     l      sp      pc    f_z    f_n    f_h    f_c
    compareReg(0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0000, 0x0188, false, false, false, false)
    compareReg(0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x0000, 0x0189, false, false, false, false)

  	// ld a, l
    compareReg(0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x0000, 0x018a, false, false, false, false)

  	// ld b, l
    compareReg(0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x07, 0x0000, 0x018b, false, false, false, false)

  	// ld c, l
    compareReg(0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x07, 0x0000, 0x018c, false, false, false, false)

  	// ld d, l
    compareReg(0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x07, 0x0000, 0x018d, false, false, false, false)

  	// ld e, l
    compareReg(0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x07, 0x0000, 0x018e, false, false, false, false)

  	// ld h, l
    compareReg(0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0000, 0x018f, false, false, false, false)

  	// ld l, l
    compareReg(0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0000, 0x0190, false, false, false, false)
  }
}
