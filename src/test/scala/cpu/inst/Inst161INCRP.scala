import chisel3._
import org.scalatest._
import chiseltest._

object Inst161INCRP extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // test code starts from $0150.
    dut.clock.step(0x50)

    // skip register initialization.
    dut.clock.step(0x12)

    // inc bc                      ; bc = $01
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0162, false, false, false, false)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0163, false, false, false, false)

	  // inc de                      ; de = $01
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0163, false, false, false, false)
    compareReg(0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0164, false, false, false, false)

	  // inc hl                      ; hl = $01
    compareReg(0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0000, 0x0164, false, false, false, false)
    compareReg(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0000, 0x0165, false, false, false, false)

    // inc sp                      ; sp = $01
    compareReg(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0000, 0x0165, false, false, false, false)
    compareReg(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x0000, 0x0166, false, false, false, false)

    // ld c, $ff                   ; c = $ff
    // inc bc                      ; bc = $0100
    dut.clock.step(2)
    compareReg(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x0001, 0x0168, false, false, false, false)
    compareReg(0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0x01, 0x0001, 0x0169, false, false, false, false)
    compareReg(0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0x01, 0x0001, 0x0169, false, false, false, false)
    compareReg(0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0001, 0x016a, false, false, false, false)

    // ld d, $ff                   ; d = $ff
    // ld e, $ff                   ; e = $ff
    // inc de                      ; de = $0000
    dut.clock.step(2)
    compareReg(0x00, 0x01, 0x00, 0xff, 0x01, 0x00, 0x01, 0x0001, 0x016d, false, false, false, false)
    compareReg(0x00, 0x01, 0x00, 0xff, 0xff, 0x00, 0x01, 0x0001, 0x016e, false, false, false, false)
    compareReg(0x00, 0x01, 0x00, 0xff, 0xff, 0x00, 0x01, 0x0001, 0x016e, false, false, false, false)
    compareReg(0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0001, 0x016f, false, false, false, false)
  }
}
