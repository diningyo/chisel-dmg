import chisel3._
import org.scalatest._
import chiseltest._

object Inst160INCR extends FlatSpec with ChiselScalatestTester with TestUtil {
  def apply(implicit dut: CpuTestTb) {
    // test code starts from $0150.
    dut.clock.step(0x50)

    // skip register initialization.
    dut.clock.step(0x0e)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x015e, false, false, false, false) // fetch first test code

    // inc b                    ; a = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x015f, false, false, false, false) // m1

    // inc c                    ; b = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0160, false, false, false, false) // m1

    // inc d                    ; c = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0161, false, false, false, false) // m1

    // inc e                    ; d = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0162, false, false, false, false) // m1

    // inc h                    ; e = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x0163, false, false, false, false) // m1

    // inc l                    ; l = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x0164, false, false, false, false) // m1

    // inc a                    ; h = $01 / z = 0 / n = 0 / h = 0 / c = 0
    compareReg(0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0165, false, false, false, false) // m1

    // ;; check z flag
    // ld  a, $ff               ; a = $ff
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0166, false, false, false, false) // m1
    compareReg(0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0167, false, false, false, false) // m2

    // inc a                    ; a = $00 / z = 1 / h = 1 / c = 0
    compareReg(0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0168, false, false, false, false) // m2

    // ld  a, $0f
    compareReg(0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x0169, true,  false, true,  false) // m1
    compareReg(0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x016a, true,  false, true,  false) // m2

    // inc a                    ; a = $10 / z = 0 / h = 1 / c = 0
    compareReg(0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x016b, true,  false, true,  false) // m1
    compareReg(0x10, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x016c, false, false, true,  false) // m1 - nop
  }
}
