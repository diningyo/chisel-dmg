import chisel3._
import chiseltest._

object Inst02LDI extends TestUtil {
  def apply(implicit dut: CpuTestTb) {
    dut.clock.setTimeout(100)

    compareReg(0, 0, 0, 0, 0, 0, 0, 0, 0x100, false, false, false, false)
    dut.clock.step(1)

    // ldi a, $01                  ; a = $01
    // ldi a, imm -> need 2 cycles
    //            a     b     c     d     e     h     l    sp     pc    f_z    f_n    f_h    f_c
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x101, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x102, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x103, false, false, false, false)
    dut.clock.step(1)

	  // ldi b, $02
    compareReg(0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x104, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x105, false, false, false, false)
    dut.clock.step(1)

	  // ldi c, $03
    compareReg(0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x106, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x107, false, false, false, false)
    dut.clock.step(1)

	  // ldi d, $04
    compareReg(0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x108, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x109, false, false, false, false)
    dut.clock.step(1)

	  // ldi e, $05
    compareReg(0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10a, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x10b, false, false, false, false)
    dut.clock.step(1)

	  // ldi h, $06
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x10c, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00, 0x10d, false, false, false, false)
    dut.clock.step(1)

	  // ldi l, $07
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00, 0x10e, false, false, false, false)
    dut.clock.step(1)
    compareReg(0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00, 0x10f, false, false, false, false)
    dut.clock.step(1)
  }
}
